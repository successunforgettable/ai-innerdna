# **WebSocket Step 4: Real-Time Admin Notification Sender**

## **🚨 CRITICAL INSTRUCTIONS FOR REPLIT AI:**

**DO NOT TOUCH ANY EXISTING CODE OR SYSTEMS:**
- ❌ DO NOT modify existing API endpoints or routes
- ❌ DO NOT change existing admin panel functionality  
- ❌ DO NOT alter existing database operations or user authentication
- ❌ DO NOT modify the Inner DNA assessment system
- ❌ DO NOT change existing notification components from previous steps
- ❌ DO NOT make assumptions about existing admin UI structure
- ❌ DO NOT use creative freedom - ONLY follow this exact prompt

**✅ ONLY ADD the specific API endpoint and update the specific function mentioned below**

## **Micro Prompt for Replit AI:**

Update the admin notification creator to send real-time notifications via WebSocket.

**STEP 4A: Create Notification API Endpoint**

Add this API endpoint to your server file (server.js, index.js, or app.js). Add this code **after your existing routes but before the server.listen():**

```javascript
// API endpoint to create and broadcast notifications
app.post('/api/notifications', (req, res) => {
  try {
    const { title, message, type, priority, targetAudience, isActive } = req.body;

    // Validate required fields
    if (!title || !message) {
      return res.status(400).json({ 
        error: 'Title and message are required' 
      });
    }

    // Create new notification object
    const newNotification = {
      id: `notif_${Date.now()}`,
      title,
      message,
      type: type || 'general',
      priority: priority || 'normal',
      targetAudience: targetAudience || 'all',
      isActive: isActive !== undefined ? isActive : true,
      createdAt: new Date().toISOString()
    };

    console.log('📝 Creating new notification:', newNotification);

    // Broadcast to all connected WebSocket clients
    if (global.broadcastNotification) {
      global.broadcastNotification(newNotification);
    }

    // TODO: Save to database/JSON file here if needed
    // For now, we're just broadcasting the notification

    res.status(201).json({
      success: true,
      notification: newNotification,
      message: 'Notification created and broadcast successfully'
    });

  } catch (error) {
    console.error('Error creating notification:', error);
    res.status(500).json({ 
      error: 'Failed to create notification' 
    });
  }
});

// API endpoint to get notification stats
app.get('/api/notifications/stats', (req, res) => {
  res.json({
    connectedClients: clients.size,
    serverStatus: 'running',
    timestamp: new Date().toISOString()
  });
});
```

**STEP 4B: Update Admin Notification Creator**

Update your existing `src/components/Admin/NotificationCreator.jsx` file. Replace the `handleSubmit` function with this enhanced version:

```jsx
const handleSubmit = async (e) => {
  e.preventDefault();
  setIsSubmitting(true);

  try {
    // Send notification via API
    const response = await fetch('/api/notifications', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    });

    const result = await response.json();

    if (response.ok) {
      console.log('✅ Notification sent successfully:', result);
      
      // Show success message
      alert(`Notification "${formData.title}" sent successfully to all connected users!`);
      
      // Reset form
      setFormData({
        title: '',
        message: '',
        type: 'general',
        priority: 'normal',
        targetAudience: 'all',
        isActive: true
      });
    } else {
      throw new Error(result.error || 'Failed to send notification');
    }

  } catch (error) {
    console.error('❌ Error sending notification:', error);
    alert(`Error sending notification: ${error.message}`);
  } finally {
    setIsSubmitting(false);
  }
};
```

**STEP 4C: Add Real-Time Stats to Admin**

Add this component **after your existing form in NotificationCreator.jsx:**

```jsx
// Add this import at the top of the file
import { useState, useEffect } from 'react';

// Add this component inside NotificationCreator, after the form
const AdminStats = () => {
  const [stats, setStats] = useState(null);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await fetch('/api/notifications/stats');
        const data = await response.json();
        setStats(data);
      } catch (error) {
        console.error('Error fetching stats:', error);
      }
    };

    fetchStats();
    // Refresh stats every 10 seconds
    const interval = setInterval(fetchStats, 10000);
    return () => clearInterval(interval);
  }, []);

  if (!stats) return null;

  return (
    <div className={styles.adminStats}>
      <h3>Real-Time Stats</h3>
      <div className={styles.statsGrid}>
        <div className={styles.statItem}>
          <span className={styles.statLabel}>Connected Users:</span>
          <span className={styles.statValue}>{stats.connectedClients}</span>
        </div>
        <div className={styles.statItem}>
          <span className={styles.statLabel}>Server Status:</span>
          <span className={styles.statValue}>{stats.serverStatus}</span>
        </div>
        <div className={styles.statItem}>
          <span className={styles.statLabel}>Last Updated:</span>
          <span className={styles.statValue}>
            {new Date(stats.timestamp).toLocaleTimeString()}
          </span>
        </div>
      </div>
    </div>
  );
};

// Add this JSX after your form in the NotificationCreator return statement
<AdminStats />
```

**STEP 4D: Add Admin Stats CSS**

Add this CSS to your existing `src/components/Admin/admin.module.css` file (at the bottom):

```css
.adminStats {
  margin-top: 32px;
  padding: 20px;
  background: #f8fafc;
  border-radius: 8px;
  border: 1px solid #e2e8f0;
}

.adminStats h3 {
  margin: 0 0 16px 0;
  font-size: 1.125rem;
  font-weight: 600;
  color: #1e293b;
}

.statsGrid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
}

.statItem {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.statLabel {
  font-size: 0.875rem;
  color: #64748b;
  font-weight: 500;
}

.statValue {
  font-size: 1.125rem;
  font-weight: 600;
  color: #1e293b;
}
```

## **Instructions:**
1. Add the API endpoints to your server file
2. Update the handleSubmit function in NotificationCreator.jsx
3. Add the AdminStats component and JSX to NotificationCreator.jsx
4. Add the admin stats CSS to admin.module.css
5. Test by creating a notification in the admin panel

**Expected Result:** Admin can create notifications that instantly appear on all connected user screens in real-time, plus see how many users are currently connected.