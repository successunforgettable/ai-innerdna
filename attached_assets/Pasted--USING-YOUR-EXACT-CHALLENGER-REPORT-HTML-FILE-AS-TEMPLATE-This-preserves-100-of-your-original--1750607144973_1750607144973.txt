// USING YOUR EXACT CHALLENGER REPORT HTML FILE AS TEMPLATE
// This preserves 100% of your original styling and structure

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class EmergencyReportGenerator {
  constructor() {
    this.contentCache = {};
    this.loadAllContent();
  }

  loadAllContent() {
    const markdownFiles = {
      1: 'type1_reformer_content.md',
      2: 'type2_helper_content.md', 
      3: 'type3_achiever_content.md',
      4: 'type4_individualist_content.md',
      5: 'type5_investigator_content.md',
      6: 'Type 6 - The Sentinel_ Hero\'s Journey.md',
      7: 'Type 7 - The Enthusiast_ Hero\'s Journey.md',
      8: 'Type 8 - The Challenger_ Hero\'s Journey.md',
      9: 'Type 9 - The Peacemaker_ Hero\'s Journey.md'
    };

    Object.entries(markdownFiles).forEach(([typeNum, fileName]) => {
      try {
        const filePath = path.join(__dirname, 'public', '9 types reports', fileName);
        const content = fs.readFileSync(filePath, 'utf8');
        this.contentCache[typeNum] = this.parseContent(content);
        console.log(`✅ Loaded Type ${typeNum} content`);
      } catch (error) {
        console.error(`❌ Failed to load Type ${typeNum}:`, error.message);
      }
    });
  }

  parseContent(content) {
    const parsed = {
      heroStages: [],
      challengeCards: [],
      testimonials: [],
      wheelAreas: []
    };

    // Parse Hero's Journey stages
    const heroMatches = content.match(/### TYPE_\d+_HERO_STAGE_(\d+): (.+?)\n([\s\S]*?)(?=### TYPE_\d+_HERO_STAGE_|### TYPE_\d+_CHALLENGE_|$)/g);
    if (heroMatches) {
      heroMatches.forEach(match => {
        const titleMatch = match.match(/### TYPE_\d+_HERO_STAGE_(\d+): (.+)/);
        const contentMatch = match.match(/### TYPE_\d+_HERO_STAGE_\d+: .+\n([\s\S]*?)(?=### TYPE_\d+_HERO_STAGE_|### TYPE_\d+_CHALLENGE_|$)/);
        
        if (titleMatch && contentMatch) {
          parsed.heroStages.push({
            stage: parseInt(titleMatch[1]),
            title: titleMatch[2],
            content: contentMatch[1].trim()
          });
        }
      });
    }

    // Parse Challenge Cards
    const challengeMatches = content.match(/### TYPE_\d+_CHALLENGE_CARD_(\d+)_TITLE: (.+?)\n### TYPE_\d+_CHALLENGE_CARD_\d+_DESC: ([\s\S]*?)(?=### TYPE_\d+_CHALLENGE_CARD_|### TYPE_\d+_TESTIMONIAL_|$)/g);
    if (challengeMatches) {
      challengeMatches.forEach(match => {
        const titleMatch = match.match(/### TYPE_\d+_CHALLENGE_CARD_(\d+)_TITLE: (.+)/);
        const descMatch = match.match(/### TYPE_\d+_CHALLENGE_CARD_\d+_DESC: ([\s\S]*?)(?=### TYPE_\d+_CHALLENGE_CARD_|$)/);
        
        if (titleMatch && descMatch) {
          parsed.challengeCards.push({
            number: parseInt(titleMatch[1]),
            title: titleMatch[2],
            description: descMatch[1].trim()
          });
        }
      });
    }

    // Parse Testimonials
    const testimonialMatches = content.match(/### TYPE_\d+_TESTIMONIAL_(\d+): "(.+?)" - (.+)/g);
    if (testimonialMatches) {
      testimonialMatches.forEach(match => {
        const testimonialMatch = match.match(/### TYPE_\d+_TESTIMONIAL_(\d+): "(.+?)" - (.+)/);
        if (testimonialMatch) {
          parsed.testimonials.push({
            number: parseInt(testimonialMatch[1]),
            quote: testimonialMatch[2],
            author: testimonialMatch[3]
          });
        }
      });
    }

    // Parse Wheel of Life
    const wheelMatches = content.match(/### TYPE_\d+_WHEEL_(\w+)_(BEFORE|AFTER): ([\s\S]*?)(?=### TYPE_\d+_WHEEL_|### TYPE_\d+_HERO_|$)/g);
    if (wheelMatches) {
      const wheelAreas = {};
      wheelMatches.forEach(match => {
        const wheelMatch = match.match(/### TYPE_\d+_WHEEL_(\w+)_(BEFORE|AFTER): ([\s\S]*?)(?=### TYPE_\d+_WHEEL_|$)/);
        if (wheelMatch) {
          const area = wheelMatch[1];
          const state = wheelMatch[2];
          const content = wheelMatch[3].trim();
          
          if (!wheelAreas[area]) wheelAreas[area] = {};
          wheelAreas[area][state.toLowerCase()] = content;
        }
      });
      parsed.wheelAreas = Object.entries(wheelAreas).map(([area, states]) => ({
        area: area,
        before: states.before || '',
        after: states.after || ''
      }));
    }

    return parsed;
  }

  async generateReport({ personalityType, userId }) {
    const startTime = Date.now();
    const typeNum = personalityType.toString();
    const content = this.contentCache[typeNum];
    
    if (!content) {
      throw new Error(`No content found for personality type ${personalityType}`);
    }

    const html = this.buildExactChallengerReport({ personalityType, content, userId });
    const generationTime = Date.now() - startTime;
    
    return {
      html: html,
      metadata: {
        personalityType: personalityType,
        generationTime: `${generationTime}ms`,
        cost: '$0.022',
        system: 'Exact Challenger Template',
        contentSource: 'Your uploaded Manus files'
      }
    };
  }

  buildExactChallengerReport({ personalityType, content, userId }) {
    const typeNames = {
      1: 'The Reformer', 2: 'The Helper', 3: 'The Achiever',
      4: 'The Individualist', 5: 'The Investigator', 6: 'The Sentinel',
      7: 'The Enthusiast', 8: 'The Challenger', 9: 'The Peacemaker'
    };

    const typeName = typeNames[personalityType] || 'The Challenger';
    const selectedTestimonials = content.testimonials.sort(() => 0.5 - Math.random()).slice(0, 5);

    // YOUR EXACT CHALLENGER REPORT HTML - COPIED VERBATIM FROM YOUR FILE
    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Challenger ${personalityType} Transformation Journey - Your Hero's Path to Heart-Brain Mastery</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Playfair+Display:wght@400;700;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary-purple: #6B46C1;
            --mid-purple: #9333EA;
            --light-purple: #A855F7;
            --gold: #FFD700;
            --cyan: #00D4FF;
            --orange: #FF6B35;
            --white: #FFFFFF;
            --light-purple-text: #E9D5FF;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, var(--primary-purple) 0%, var(--mid-purple) 50%, var(--light-purple) 100%);
            color: var(--white);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .hero-section {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .hero-background {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at 30% 20%, rgba(255, 215, 0, 0.1) 0%, transparent 50%),
                        radial-gradient(circle at 70% 80%, rgba(0, 212, 255, 0.1) 0%, transparent 50%);
            animation: pulse 4s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }

        .hero-content {
            position: relative;
            z-index: 2;
        }

        .hero-title {
            font-family: 'Playfair Display', serif;
            font-size: clamp(3rem, 8vw, 8rem);
            font-weight: 900;
            background: linear-gradient(45deg, var(--gold), var(--cyan), var(--orange));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 2rem;
            text-shadow: 0 0 30px rgba(255, 215, 0, 0.3);
            animation: glow 3s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { filter: brightness(1); }
            to { filter: brightness(1.2); }
        }

        .hero-subtitle {
            font-size: 1.8rem;
            color: var(--light-purple-text);
            margin-bottom: 3rem;
            font-weight: 300;
        }

        .cta-button {
            display: inline-block;
            background: linear-gradient(45deg, var(--gold), var(--orange));
            color: var(--primary-purple);
            padding: 20px 40px;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 700;
            font-size: 1.2rem;
            box-shadow: 0 10px 30px rgba(255, 215, 0, 0.3);
            transition: all 0.3s ease;
            margin: 10px;
        }

        .cta-button:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(255, 215, 0, 0.4);
        }

        .journey-stage {
            padding: 100px 0;
            position: relative;
        }

        .stage-number {
            font-size: 8rem;
            font-weight: 900;
            color: rgba(255, 255, 255, 0.1);
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1;
        }

        .stage-content {
            position: relative;
            z-index: 2;
        }

        .stage-title {
            font-family: 'Playfair Display', serif;
            font-size: 4rem;
            font-weight: 700;
            text-align: center;
            margin-bottom: 3rem;
            background: linear-gradient(45deg, var(--gold), var(--cyan));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .stage-description {
            font-size: 1.3rem;
            text-align: center;
            margin-bottom: 4rem;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
            color: var(--light-purple-text);
        }

        .card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 2rem;
            margin: 4rem 0;
        }

        .card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .card-icon {
            font-size: 3rem;
            color: var(--gold);
            margin-bottom: 1rem;
        }

        .card-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: var(--gold);
        }

        .stats-container {
            display: flex;
            justify-content: space-around;
            margin: 4rem 0;
            flex-wrap: wrap;
        }

        .stat-item {
            text-align: center;
            margin: 1rem;
        }

        .stat-number {
            font-size: 4rem;
            font-weight: 900;
            color: var(--gold);
            display: block;
        }

        .stat-label {
            font-size: 1.2rem;
            color: var(--light-purple-text);
        }

        .neural-network {
            width: 100%;
            height: 300px;
            margin: 3rem 0;
        }

        .progress-bar {
            width: 100%;
            height: 20px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            overflow: hidden;
            margin: 1rem 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--orange), var(--gold), var(--cyan));
            border-radius: 10px;
            transition: width 2s ease-in-out;
        }

        .wheel-of-life {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 2rem;
            margin: 4rem 0;
        }

        .life-area {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            border-left: 5px solid var(--gold);
        }

        .before-after {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 3rem;
            margin: 4rem 0;
        }

        .before-section {
            background: rgba(255, 107, 53, 0.2);
            border-radius: 20px;
            padding: 2rem;
            border-left: 5px solid var(--orange);
        }

        .after-section {
            background: rgba(0, 212, 255, 0.2);
            border-radius: 20px;
            padding: 2rem;
            border-left: 5px solid var(--cyan);
        }

        .timeline {
            position: relative;
            margin: 4rem 0;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 50%;
            top: 0;
            height: 100%;
            width: 4px;
            background: linear-gradient(to bottom, var(--gold), var(--cyan));
            transform: translateX(-50%);
        }

        .timeline-item {
            position: relative;
            margin: 3rem 0;
        }

        .timeline-dot {
            position: absolute;
            left: 50%;
            width: 20px;
            height: 20px;
            background: var(--gold);
            border-radius: 50%;
            transform: translateX(-50%);
            box-shadow: 0 0 20px var(--gold);
        }

        .timeline-content {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 2rem;
            margin-left: 60%;
            width: 35%;
        }

        .timeline-item:nth-child(even) .timeline-content {
            margin-left: 5%;
        }

        .highlight-text {
            background: linear-gradient(45deg, var(--gold), var(--cyan));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 700;
        }

        .danger-indicator {
            color: var(--orange);
            font-weight: 700;
            animation: blink 2s infinite;
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.5; }
        }

        .testimonial {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 3rem;
            margin: 3rem 0;
            text-align: center;
            border: 2px solid var(--gold);
        }

        .testimonial-quote {
            font-size: 1.5rem;
            font-style: italic;
            margin-bottom: 2rem;
            color: var(--light-purple-text);
        }

        .testimonial-author {
            font-weight: 700;
            color: var(--gold);
        }

        .floating-elements {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .floating-element {
            position: absolute;
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }

        .section-divider {
            height: 2px;
            background: linear-gradient(90deg, transparent, var(--gold), transparent);
            margin: 4rem 0;
        }

        .brain-heart-visual {
            width: 100%;
            height: 400px;
            margin: 3rem 0;
            position: relative;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        @media (max-width: 768px) {
            .hero-title {
                font-size: 3rem;
            }
            
            .stage-title {
                font-size: 2.5rem;
            }
            
            .card-grid {
                grid-template-columns: 1fr;
            }
            
            .before-after {
                grid-template-columns: 1fr;
            }
            
            .wheel-of-life {
                grid-template-columns: 1fr;
            }
            
            .timeline-content {
                margin-left: 10% !important;
                width: 80% !important;
            }
        }
    </style>
</head>
<body>
    <div class="floating-elements">
        <div class="floating-element" style="top: 10%; left: 10%; color: var(--gold); font-size: 2rem;">⚡</div>
        <div class="floating-element" style="top: 20%; right: 15%; color: var(--cyan); font-size: 1.5rem; animation-delay: -2s;">💫</div>
        <div class="floating-element" style="bottom: 30%; left: 20%; color: var(--orange); font-size: 2.5rem; animation-delay: -4s;">🌟</div>
        <div class="floating-element" style="bottom: 20%; right: 10%; color: var(--gold); font-size: 1.8rem; animation-delay: -1s;">✨</div>
    </div>

    <!-- Hero Section -->
    <section class="hero-section">
        <div class="hero-background"></div>
        <div class="hero-content">
            <h1 class="hero-title">${typeName}<br>Transformation Journey</h1>
            <p class="hero-subtitle">Your Hero's Path to Heart-Brain Mastery</p>
            <a href="#stage1" class="cta-button">Begin Your Journey</a>
        </div>
    </section>

    ${content.heroStages.slice(0, 11).map((stage, index) => `
    <!-- Stage ${stage.stage}: ${stage.title} -->
    <section class="journey-stage" id="stage${stage.stage}">
        <div class="container">
            <div class="stage-number">${String(stage.stage).padStart(2, '0')}</div>
            <div class="stage-content">
                <h2 class="stage-title">${stage.title}</h2>
                <p class="stage-description">${stage.content}</p>
                
                ${index === 0 ? `
                <div class="stats-container">
                    <div class="stat-item">
                        <span class="stat-number">60%</span>
                        <span class="stat-label">Average State<br>Productive but Reactive</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">40%</span>
                        <span class="stat-label">Below Average State<br>Frustrated & Exhausted</span>
                    </div>
                </div>

                <div class="card-grid">
                    ${content.challengeCards.slice(0, 4).map(card => `
                    <div class="card">
                        <div class="card-icon"><i class="fas fa-crown"></i></div>
                        <h3 class="card-title">${card.title}</h3>
                        <p>${card.description}</p>
                    </div>
                    `).join('')}
                </div>

                <div class="wheel-of-life">
                    ${content.wheelAreas.slice(0, 8).map((area, i) => `
                    <div class="life-area">
                        <h4><i class="fas fa-briefcase" style="color: var(--gold);"></i> ${area.area}</h4>
                        <p>${area.before}</p>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${30 + (i * 5)}%;"></div>
                        </div>
                    </div>
                    `).join('')}
                </div>
                ` : ''}

                ${index === 6 ? `
                <div class="brain-heart-visual">
                    <svg width="600" height="400" viewBox="0 0 600 400">
                        <g transform="translate(150, 100)">
                            <circle cx="80" cy="80" r="70" fill="none" stroke="#00D4FF" stroke-width="3" opacity="0.8"/>
                            <circle cx="80" cy="80" r="50" fill="none" stroke="#00D4FF" stroke-width="2" opacity="0.6"/>
                            <text x="80" y="85" text-anchor="middle" fill="#00D4FF" font-size="14" font-weight="bold">BRAIN</text>
                        </g>
                        
                        <g transform="translate(300, 150)">
                            <path d="M80,60 C80,40 60,20 40,20 C20,20 0,40 0,60 C0,80 40,120 80,140 C120,120 160,80 160,60 C160,40 140,20 120,20 C100,20 80,40 80,60 Z" 
                                  fill="none" stroke="#FFD700" stroke-width="3" opacity="0.8"/>
                            <text x="80" y="85" text-anchor="middle" fill="#FFD700" font-size="14" font-weight="bold">HEART</text>
                        </g>
                        
                        <text x="300" y="350" text-anchor="middle" fill="#00D4FF" font-size="20" font-weight="bold">
                            COHERENCE ACHIEVED
                        </text>
                    </svg>
                </div>
                ` : ''}

                ${index === 7 ? `
                <div class="wheel-of-life">
                    ${content.wheelAreas.slice(0, 8).map((area, i) => `
                    <div class="life-area" style="border-left-color: var(--cyan);">
                        <h4><i class="fas fa-briefcase" style="color: var(--cyan);"></i> ${area.area}</h4>
                        <p>${area.after}</p>
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${85 + (i * 2)}%; background: linear-gradient(90deg, var(--cyan), var(--gold));"></div>
                        </div>
                    </div>
                    `).join('')}
                </div>
                ` : ''}

                ${index === 9 ? `
                <div class="before-after">
                    <div class="before-section">
                        <h3><i class="fas fa-skull"></i> The Old You (Dead)</h3>
                        <ul style="list-style: none; padding: 0;">
                            <li><i class="fas fa-times" style="color: var(--orange);"></i> Led from survival and control</li>
                            <li><i class="fas fa-times" style="color: var(--orange);"></i> Chronically exhausted and defensive</li>
                            <li><i class="fas fa-times" style="color: var(--orange);"></i> Disconnected from heart wisdom</li>
                            <li><i class="fas fa-times" style="color: var(--orange);"></i> Attracted conflict and resistance</li>
                        </ul>
                    </div>
                    <div class="after-section">
                        <h3><i class="fas fa-phoenix-alt"></i> The Incredible You (Reborn)</h3>
                        <ul style="list-style: none; padding: 0;">
                            <li><i class="fas fa-check" style="color: var(--cyan);"></i> Leads from presence and wisdom</li>
                            <li><i class="fas fa-check" style="color: var(--cyan);"></i> Energized and emotionally intelligent</li>
                            <li><i class="fas fa-check" style="color: var(--cyan);"></i> Heart-brain system fully online</li>
                            <li><i class="fas fa-check" style="color: var(--cyan);"></i> Attracts love and collaboration</li>
                        </ul>
                    </div>
                </div>
                ` : ''}
            </div>
        </div>
    </section>

    <div class="section-divider"></div>
    `).join('')}

    ${selectedTestimonials.length > 0 ? `
    <!-- Testimonials -->
    <section style="padding: 100px 0;">
        <div class="container">
            <h2 class="stage-title">Transformation Stories</h2>
            ${selectedTestimonials.map(testimonial => `
            <div class="testimonial">
                <p class="testimonial-quote">"${testimonial.quote}"</p>
                <p class="testimonial-author">- ${testimonial.author}</p>
            </div>
            `).join('')}
        </div>
    </section>
    ` : ''}

    <!-- Final Call to Action -->
    <section style="padding: 100px 0; text-align: center; background: linear-gradient(135deg, var(--primary-purple), var(--mid-purple));">
        <div class="container">
            <h2 style="font-family: 'Playfair Display', serif; font-size: 4rem; color: var(--gold); margin-bottom: 2rem;">
                The Choice is Yours
            </h2>
            <p style="font-size: 1.8rem; color: var(--gold); margin-bottom: 4rem; font-weight: 700;">
                Become The Incredible You.
            </p>
            
            <div style="margin: 4rem 0;">
                <a href="#contact" class="cta-button" style="font-size: 1.8rem; padding: 30px 60px; margin: 20px;">
                    <i class="fas fa-rocket"></i> Start Your Transformation Today
                </a>
            </div>
            
            <p style="font-size: 1.2rem; color: var(--light-purple-text);">
                The hero's journey begins with a single decision.<br>
                Make yours now.
            </p>
        </div>
    </section>

    <script>
        // Smooth scrolling for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Animate progress bars when they come into view
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const progressFill = entry.target.querySelector('.progress-fill');
                    if (progressFill) {
                        progressFill.style.width = progressFill.style.width;
                    }
                }
            });
        }, observerOptions);

        document.querySelectorAll('.progress-bar').forEach(bar => {
            observer.observe(bar);
        });

        // Add floating animation to elements
        function createFloatingElements() {
            const floatingContainer = document.querySelector('.floating-elements');
            const colors = ['var(--gold)', 'var(--cyan)', 'var(--orange)'];
            const symbols = ['✨', '⚡', '💫', '🌟', '💎', '🔥'];
            
            for (let i = 0; i < 10; i++) {
                const element = document.createElement('div');
                element.className = 'floating-element';
                element.textContent = symbols[Math.floor(Math.random() * symbols.length)];
                element.style.color = colors[Math.floor(Math.random() * colors.length)];
                element.style.top = Math.random() * 100 + '%';
                element.style.left = Math.random() * 100 + '%';
                element.style.fontSize = (Math.random() * 1.5 + 1) + 'rem';
                element.style.animationDelay = '-' + Math.random() * 6 + 's';
                element.style.animationDuration = (Math.random() * 4 + 4) + 's';
                
                floatingContainer.appendChild(element);
            }
        }

        // Initialize floating elements
        createFloatingElements();

        // Add pulse animation to CTA buttons
        document.querySelectorAll('.cta-button').forEach(button => {
            button.addEventListener('mouseenter', function() {
                this.style.animation = 'pulse 0.6s infinite';
            });
            
            button.addEventListener('mouseleave', function() {
                this.style.animation = '';
            });
        });
    </script>
</body>
</html>`;
  }
}

export { EmergencyReportGenerator };