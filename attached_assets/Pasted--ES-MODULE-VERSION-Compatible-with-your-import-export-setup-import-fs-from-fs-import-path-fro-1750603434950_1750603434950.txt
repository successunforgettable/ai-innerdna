// ES MODULE VERSION - Compatible with your import/export setup
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ES module directory resolution
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class MarkdownContentLoader {
  constructor() {
    this.contentCache = {};
    this.loadAllContent();
  }

  loadAllContent() {
    // Your exact markdown file names from public/9 types reports/
    const markdownFiles = {
      1: 'type1_reformer_content.md',
      2: 'type2_helper_content.md', 
      3: 'type3_achiever_content.md',
      4: 'type4_individualist_content.md',
      5: 'type5_investigator_content.md',
      6: 'Type 6 - The Sentinel_ Hero\'s Journey.md',
      7: 'Type 7 - The Enthusiast_ Hero\'s Journey.md',
      8: 'Type 8 - The Challenger_ Hero\'s Journey.md',
      9: 'Type 9 - The Peacemaker_ Hero\'s Journey.md'
    };

    // Load and parse each file from public/9 types reports/
    Object.entries(markdownFiles).forEach(([typeNum, fileName]) => {
      try {
        const filePath = path.join(__dirname, 'public', '9 types reports', fileName);
        const content = fs.readFileSync(filePath, 'utf8');
        this.contentCache[typeNum] = this.parseMarkdownContent(content, typeNum);
        console.log(`‚úÖ Loaded Type ${typeNum} content from ${fileName}`);
      } catch (error) {
        console.error(`‚ùå Failed to load ${fileName}:`, error.message);
        console.error(`   Tried path: ${path.join(__dirname, 'public', '9 types reports', fileName)}`);
      }
    });
  }

  parseMarkdownContent(markdownText, typeNum) {
    const content = {
      heroJourney: [],
      challengeCards: [],
      testimonials: [],
      wheelOfLife: {}
    };

    // Extract Hero's Journey stages (11 stages)
    for (let i = 1; i <= 11; i++) {
      const stagePattern = new RegExp(`TYPE_${typeNum}_HERO_STAGE_${i}:\\s*(.+?)(?=TYPE_${typeNum}_HERO_STAGE_${i + 1}:|TYPE_${typeNum}_CHALLENGE_CARD|$)`, 's');
      const match = markdownText.match(stagePattern);
      if (match) {
        content.heroJourney.push(match[1].trim());
      }
    }

    // Extract Challenge Cards (8 cards)
    for (let i = 1; i <= 8; i++) {
      const titlePattern = new RegExp(`TYPE_${typeNum}_CHALLENGE_CARD_${i}_TITLE:\\s*(.+?)\\n`, 'g');
      const descPattern = new RegExp(`TYPE_${typeNum}_CHALLENGE_CARD_${i}_DESC:\\s*(.+?)(?=TYPE_${typeNum}_CHALLENGE_CARD_${i + 1}|TYPE_${typeNum}_TESTIMONIAL|$)`, 's');
      
      titlePattern.lastIndex = 0; // Reset regex
      const titleMatch = titlePattern.exec(markdownText);
      const descMatch = descPattern.exec(markdownText);
      
      if (titleMatch && descMatch) {
        content.challengeCards.push({
          title: titleMatch[1].trim(),
          desc: descMatch[1].trim()
        });
      }
    }

    // Extract Testimonials (find all testimonials)
    const testimonialPattern = new RegExp(`TYPE_${typeNum}_TESTIMONIAL_(\\d+):\\s*(.+?)(?=TYPE_${typeNum}_TESTIMONIAL_|TYPE_${typeNum}_WHEEL_|$)`, 'gs');
    let testimonialMatch;
    while ((testimonialMatch = testimonialPattern.exec(markdownText)) !== null) {
      content.testimonials.push(testimonialMatch[2].trim());
    }

    // Extract Wheel of Life areas
    const lifeAreas = ['CAREER', 'RELATIONSHIPS', 'HEALTH', 'FINANCES', 'PERSONAL_GROWTH', 'SOCIAL_LIFE', 'ENVIRONMENT', 'RECREATION'];
    
    lifeAreas.forEach(area => {
      const beforePattern = new RegExp(`TYPE_${typeNum}_WHEEL_${area}_BEFORE:\\s*(.+?)(?=TYPE_${typeNum}_WHEEL_${area}_AFTER:|TYPE_${typeNum}_WHEEL_|$)`, 's');
      const afterPattern = new RegExp(`TYPE_${typeNum}_WHEEL_${area}_AFTER:\\s*(.+?)(?=TYPE_${typeNum}_WHEEL_|$)`, 's');
      
      const beforeMatch = markdownText.match(beforePattern);
      const afterMatch = markdownText.match(afterPattern);
      
      if (beforeMatch && afterMatch) {
        content.wheelOfLife[area.toLowerCase()] = {
          before: beforeMatch[1].trim(),
          after: afterMatch[1].trim()
        };
      }
    });

    return content;
  }

  getPersonalityContent(typeNumber) {
    return this.contentCache[typeNumber.toString()];
  }

  // Get a summary of loaded content
  getLoadSummary() {
    const summary = {};
    Object.entries(this.contentCache).forEach(([type, content]) => {
      summary[`Type ${type}`] = {
        heroStages: content.heroJourney.length,
        challengeCards: content.challengeCards.length,
        testimonials: content.testimonials.length,
        wheelAreas: Object.keys(content.wheelOfLife).length
      };
    });
    return summary;
  }
}

// ES MODULE EMERGENCY REPORT GENERATOR
export class EmergencyReportGenerator {
  constructor() {
    this.contentLoader = new MarkdownContentLoader();
    console.log('üìÅ Content loaded from markdown files:');
    console.log(this.contentLoader.getLoadSummary());
  }

  async generateReport(assessmentData) {
    const startTime = Date.now();
    
    try {
      const {
        personalityType = 1,
        wingInfluence = 1,
        moodStates = { primary: 60, secondary: 40 },
        subtype = 'Self-Preservation',
        userId = Date.now()
      } = assessmentData;

      // Get content from your markdown files
      const content = this.contentLoader.getPersonalityContent(personalityType);
      
      if (!content) {
        throw new Error(`Content not found for personality type ${personalityType}. Available types: ${Object.keys(this.contentLoader.contentCache)}`);
      }

      // Select rotating testimonials
      const selectedTestimonials = this.selectTestimonials(content.testimonials, userId);
      
      // Generate the report HTML
      const html = this.buildHTMLReport({
        personalityType,
        content,
        testimonials: selectedTestimonials,
        metadata: { 
          wingInfluence, 
          subtype, 
          generationTime: Date.now() - startTime,
          sourceFiles: 'Markdown files from public/9 types reports/'
        }
      });
      
      const generationTime = Date.now() - startTime;
      
      return {
        html: html,
        metadata: {
          personalityType,
          generationTime: `${generationTime}ms`,
          cost: '$0.022',
          system: 'ES Module Template (NO API calls)',
          contentSource: 'Your uploaded Manus files',
          concurrentCapacity: 'UNLIMITED',
          loadedTypes: Object.keys(this.contentLoader.contentCache).length
        }
      };
      
    } catch (error) {
      console.error('‚ùå Report generation failed:', error);
      throw error;
    }
  }

  selectTestimonials(testimonialPool, userId, count = 5) {
    if (!testimonialPool || testimonialPool.length === 0) return [];
    
    const selected = [];
    for (let i = 0; i < count && i < testimonialPool.length; i++) {
      const index = (userId + i * 7) % testimonialPool.length;
      selected.push(testimonialPool[index]);
    }
    return selected;
  }

  buildHTMLReport({ personalityType, content, testimonials, metadata }) {
    const typeNames = {
      1: 'The Reformer', 2: 'The Helper', 3: 'The Achiever',
      4: 'The Individualist', 5: 'The Investigator', 6: 'The Sentinel',
      7: 'The Enthusiast', 8: 'The Challenger', 9: 'The Peacemaker'
    };

    const transformations = {
      1: 'Inner criticism ‚Üí Self-acceptance and flexible wisdom',
      2: 'Others-focused ‚Üí Authentic self-care', 
      3: 'Image-driven ‚Üí Authentic success',
      4: 'Emotional chaos ‚Üí Balanced authenticity',
      5: 'Withdrawal and hoarding ‚Üí Confident engagement',
      6: 'Fearful dependence ‚Üí Inner authority and confident courage',
      7: 'Scattered excitement ‚Üí Focused joy and emotional integration',
      8: 'Dominating force ‚Üí Empowering strength and vulnerable leadership',
      9: 'Comfortable stagnation ‚Üí Energized purpose and self-assertion'
    };

    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The ${typeNames[personalityType]} Transformation Journey - Your Hero's Path to Heart-Brain Mastery</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Playfair+Display:wght@400;700;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-purple: #6B46C1;
            --mid-purple: #9333EA;
            --light-purple: #A855F7;
            --gold: #FFD700;
            --cyan: #00D4FF;
            --orange: #FF6B35;
            --white: #FFFFFF;
            --light-purple-text: #E9D5FF;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, var(--primary-purple) 0%, var(--mid-purple) 50%, var(--light-purple) 100%);
            color: var(--white);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .hero-section {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .hero-background {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at 30% 20%, rgba(255, 215, 0, 0.1) 0%, transparent 50%),
                        radial-gradient(circle at 70% 80%, rgba(0, 212, 255, 0.1) 0%, transparent 50%);
            animation: pulse 4s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.5; }
            50% { opacity: 1; }
        }

        .hero-content {
            position: relative;
            z-index: 2;
        }

        .hero-title {
            font-family: 'Playfair Display', serif;
            font-size: clamp(3rem, 8vw, 8rem);
            font-weight: 900;
            background: linear-gradient(45deg, var(--gold), var(--cyan), var(--orange));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 2rem;
            text-shadow: 0 0 30px rgba(255, 215, 0, 0.3);
            animation: glow 3s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { filter: brightness(1); }
            to { filter: brightness(1.2); }
        }

        .hero-subtitle {
            font-size: 1.8rem;
            color: var(--light-purple-text);
            margin-bottom: 3rem;
            font-weight: 300;
        }

        .journey-stage {
            padding: 100px 0;
            position: relative;
        }

        .stage-number {
            font-size: 8rem;
            font-weight: 900;
            color: rgba(255, 255, 255, 0.1);
            position: absolute;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1;
        }

        .stage-content {
            position: relative;
            z-index: 2;
        }

        .stage-title {
            font-family: 'Playfair Display', serif;
            font-size: 4rem;
            font-weight: 700;
            text-align: center;
            margin-bottom: 3rem;
            background: linear-gradient(45deg, var(--gold), var(--cyan));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .stage-description {
            font-size: 1.3rem;
            text-align: center;
            margin-bottom: 4rem;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
            color: var(--light-purple-text);
        }

        .card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 2rem;
            margin: 4rem 0;
        }

        .card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .card-icon {
            font-size: 3rem;
            color: var(--gold);
            margin-bottom: 1rem;
        }

        .card-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: var(--gold);
        }

        .testimonial {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 3rem;
            margin: 3rem 0;
            text-align: center;
            border: 2px solid var(--gold);
        }

        .testimonial-quote {
            font-size: 1.5rem;
            font-style: italic;
            margin-bottom: 2rem;
            color: var(--light-purple-text);
        }

        .testimonial-author {
            font-weight: 700;
            color: var(--gold);
        }

        .floating-elements {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .floating-element {
            position: absolute;
            animation: float 6s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }

        .section-divider {
            height: 2px;
            background: linear-gradient(90deg, transparent, var(--gold), transparent);
            margin: 4rem 0;
        }

        .highlight-text {
            background: linear-gradient(45deg, var(--gold), var(--cyan));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 700;
        }

        .performance-badge {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        @media (max-width: 768px) {
            .hero-title {
                font-size: 3rem;
            }
            
            .stage-title {
                font-size: 2.5rem;
            }
            
            .card-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="floating-elements">
        <div class="floating-element" style="top: 10%; left: 10%; color: var(--gold); font-size: 2rem;">‚ö°</div>
        <div class="floating-element" style="top: 20%; right: 15%; color: var(--cyan); font-size: 1.5rem; animation-delay: -2s;">üí´</div>
        <div class="floating-element" style="bottom: 30%; left: 20%; color: var(--orange); font-size: 2.5rem; animation-delay: -4s;">üåü</div>
        <div class="floating-element" style="bottom: 20%; right: 10%; color: var(--gold); font-size: 1.8rem; animation-delay: -1s;">‚ú®</div>
    </div>

    <!-- Hero Section -->
    <section class="hero-section">
        <div class="hero-background"></div>
        <div class="hero-content">
            <h1 class="hero-title">The ${typeNames[personalityType]}<br>Transformation Journey</h1>
            <p class="hero-subtitle">Your Hero's Path to Heart-Brain Mastery</p>
            <div class="performance-badge">
                <p><strong>Generated in ${metadata.generationTime}</strong> | Cost: $0.022 | System: Unlimited Scale Template</p>
            </div>
        </div>
    </section>

    <!-- Transformation Overview -->
    <section class="journey-stage">
        <div class="container">
            <div class="stage-number">‚àû</div>
            <div class="stage-content">
                <h2 class="stage-title">Your Transformation</h2>
                <p class="stage-description">
                    <span class="highlight-text">${transformations[personalityType]}</span>
                </p>
            </div>
        </div>
    </section>

    <div class="section-divider"></div>

    <!-- Hero's Journey Stages -->
    ${content.heroJourney.slice(0, 3).map((stage, index) => `
    <section class="journey-stage">
        <div class="container">
            <div class="stage-number">${String(index + 1).padStart(2, '0')}</div>
            <div class="stage-content">
                <h2 class="stage-title">${['The Ordinary World', 'The Call to Adventure', 'Refusal of the Call'][index]}</h2>
                <p class="stage-description">${stage}</p>
            </div>
        </div>
    </section>
    <div class="section-divider"></div>
    `).join('')}

    <!-- Challenge Cards -->
    <section class="journey-stage">
        <div class="container">
            <div class="stage-number">üí™</div>
            <div class="stage-content">
                <h2 class="stage-title">Growth Challenges</h2>
                <p class="stage-description">Practical steps for your transformation journey</p>
                
                <div class="card-grid">
                    ${content.challengeCards.slice(0, 4).map(card => `
                    <div class="card">
                        <div class="card-icon"><i class="fas fa-mountain"></i></div>
                        <h3 class="card-title">${card.title}</h3>
                        <p>${card.desc}</p>
                    </div>
                    `).join('')}
                </div>
            </div>
        </div>
    </section>

    <div class="section-divider"></div>

    <!-- Testimonials -->
    <section class="journey-stage">
        <div class="container">
            <div class="stage-content">
                <h2 class="stage-title">Transformation Stories</h2>
                ${testimonials.slice(0, 3).map(testimonial => `
                <div class="testimonial">
                    <p class="testimonial-quote">${testimonial.split(' - ')[0].replace(/"/g, '')}</p>
                    <p class="testimonial-author">- ${testimonial.split(' - ')[1] || 'Anonymous'}</p>
                </div>
                `).join('')}
            </div>
        </div>
    </section>

    <!-- Final CTA Section -->
    <section style="padding: 100px 0; text-align: center; background: linear-gradient(135deg, var(--primary-purple), var(--mid-purple));">
        <div class="container">
            <h2 style="font-family: 'Playfair Display', serif; font-size: 4rem; color: var(--gold); margin-bottom: 2rem;">
                Your Journey Begins Now
            </h2>
            <p style="font-size: 1.5rem; color: var(--light-purple-text); margin-bottom: 3rem; max-width: 800px; margin-left: auto; margin-right: auto;">
                You've seen where your life is today. You've seen what's possible through transformation. 
                <span style="color: var(--gold); font-weight: 700;">Now decide.</span>
            </p>
            
            <div class="performance-badge" style="max-width: 600px; margin: 0 auto;">
                <p><strong>‚úÖ Emergency Template System Active</strong></p>
                <p>Unlimited Concurrent Users | Zero API Dependencies | $0.022 Cost | &lt;5 Second Generation</p>
                <p>Content Source: Your Manus.ai Files | System: Heart-Brain Mastery Platform</p>
            </div>
        </div>
    </section>

    <script>
        // Add floating animation effects
        document.addEventListener('DOMContentLoaded', function() {
            const floatingElements = document.querySelectorAll('.floating-element');
            floatingElements.forEach((element, index) => {
                element.style.animationDelay = \`\${-index * 0.5}s\`;
                element.style.animationDuration = \`\${6 + (index * 0.5)}s\`;
            });
        });
    </script>
</body>
</html>`;
  }
}

// Default export for easy importing
export default EmergencyReportGenerator;