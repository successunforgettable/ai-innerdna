# **CORRECTED PROMPT 8: Final Integration and Testing**

**TASK:** Complete Color Phase integration with proper data flow and navigation

**CRITICAL ISSUE:** Ensure all components work together and data is properly saved

**COMPLETE COLOR PHASE COMPONENT:**
```tsx
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { stateOptions } from '../data/stateOptions';
import { StateCard } from '../components/StateCard';
import { StateSlider } from '../components/StateSlider';
import { TowerVisualization } from '../components/TowerVisualization';

const ColorPhase = ({ onContinue, assessmentData }) => {
  const [selectedStates, setSelectedStates] = useState([]);
  const [colorDistribution, setColorDistribution] = useState({ primary: 70, secondary: 30 });
  const [canProceed, setCanProceed] = useState(false);

  const handleStateSelect = (stateId) => {
    if (selectedStates.includes(stateId)) {
      setSelectedStates(selectedStates.filter(id => id !== stateId));
    } else if (selectedStates.length < 2) {
      setSelectedStates([...selectedStates, stateId]);
    }
  };

  const handleDistributionChange = (value) => {
    setColorDistribution({
      primary: value,
      secondary: 100 - value
    });
  };

  const handleContinue = () => {
    const colorStateData = {
      selectedStates,
      distribution: colorDistribution,
      primaryState: selectedStates[0],
      secondaryState: selectedStates[1],
      timestamp: Date.now()
    };
    
    onContinue(colorStateData);
  };

  const getSelectedColors = () => {
    if (selectedStates.length !== 2) return ['#ffffff', '#ffffff'];
    return [
      stateOptions.find(s => s.id === selectedStates[0])?.color || '#ffffff',
      stateOptions.find(s => s.id === selectedStates[1])?.color || '#ffffff'
    ];
  };

  const getSelectedStateNames = () => {
    if (selectedStates.length !== 2) return ['', ''];
    return [
      stateOptions.find(s => s.id === selectedStates[0])?.name || '',
      stateOptions.find(s => s.id === selectedStates[1])?.name || ''
    ];
  };

  useEffect(() => {
    setCanProceed(selectedStates.length === 2);
  }, [selectedStates]);

  return (
    <motion.div
      className="color-phase"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.6, ease: [0.4, 0, 0.2, 1] }}
    >
      <motion.div 
        className="color-phase-header"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2, duration: 0.5 }}
      >
        <h1>Color State Selection</h1>
        <p>Select 2 color states that represent your current experience</p>
      </motion.div>

      <div className="color-phase-content">
        <div className="color-selection-column">
          <div className="color-selection-container">
            <h2 className="section-title">Choose exactly 2 color palettes from the 5 options below</h2>
            
            <motion.div 
              className="state-cards-container"
              initial="initial"
              animate="animate"
              variants={{
                initial: { opacity: 0 },
                animate: {
                  opacity: 1,
                  transition: { staggerChildren: 0.1, delayChildren: 0.4 }
                }
              }}
            >
              {stateOptions.map((state, index) => (
                <motion.div
                  key={state.id}
                  variants={{
                    initial: { opacity: 0, x: -20 },
                    animate: { opacity: 1, x: 0 }
                  }}
                  whileHover={{ scale: 1.02, y: -2 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <StateCard
                    state={state}
                    isSelected={selectedStates.includes(state.id)}
                    onSelect={() => handleStateSelect(state.id)}
                  />
                </motion.div>
              ))}
            </motion.div>

            <AnimatePresence>
              {selectedStates.length === 2 && (
                <motion.div
                  initial={{ opacity: 0, y: 20, scale: 0.95 }}
                  animate={{ 
                    opacity: 1, 
                    y: 0, 
                    scale: 1,
                    transition: { duration: 0.5, ease: [0.4, 0, 0.2, 1] }
                  }}
                  exit={{ 
                    opacity: 0, 
                    y: -20, 
                    scale: 0.95,
                    transition: { duration: 0.3 }
                  }}
                >
                  <StateSlider
                    value={colorDistribution.primary}
                    onChange={handleDistributionChange}
                    colors={getSelectedColors()}
                    stateNames={getSelectedStateNames()}
                  />
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>

        <div className="tower-column">
          <div className="tower-container">
            <TowerVisualization
              selectedStates={selectedStates}
              distribution={colorDistribution}
              stateOptions={stateOptions}
            />
          </div>
        </div>
      </div>

      <div className="color-phase-navigation">
        <motion.button
          className={`continue-button ${canProceed ? 'enabled' : 'disabled'}`}
          disabled={!canProceed}
          onClick={handleContinue}
          whileHover={canProceed ? { 
            scale: 1.05,
            y: -2,
            transition: { duration: 0.2 }
          } : {}}
          whileTap={canProceed ? { 
            scale: 0.95,
            y: 0,
            transition: { duration: 0.1 }
          } : {}}
          initial={{ opacity: 0, y: 20 }}
          animate={{ 
            opacity: 1, 
            y: 0,
            transition: { delay: 0.8, duration: 0.4 }
          }}
        >
          {canProceed ? 'Continue to Detail Tokens' : 'Select 2 States to Continue'}
        </motion.button>
      </div>
    </motion.div>
  );
};

export default ColorPhase;
```

**ROUTING INTEGRATION:**
```tsx
// Add to main routing file
import ColorPhase from './pages/ColorPhase';

// In your router/App component
case 'color-phase':
  return (
    <ColorPhase
      onContinue={(colorData) => {
        // Save color state data
        setAssessmentData(prev => ({
          ...prev,
          colorState: colorData
        }));
        // Navigate to next phase
        setCurrentPhase('detail-tokens');
      }}
      assessmentData={assessmentData}
    />
  );
```

**DATA PERSISTENCE:**
```tsx
// Ensure data is saved properly
const saveColorStateData = (colorData) => {
  const updatedAssessment = {
    ...assessmentData,
    colorState: {
      selectedStates: colorData.selectedStates,
      distribution: colorData.distribution,
      primaryState: colorData.primaryState,
      secondaryState: colorData.secondaryState,
      completedAt: new Date().toISOString()
    }
  };
  
  // Save to local storage or send to backend
  localStorage.setItem('innerDnaAssessment', JSON.stringify(updatedAssessment));
  
  return updatedAssessment;
};
```

**FINAL VERIFICATION CHECKLIST:**
- [ ] Color Phase has proper glass-morphism design matching other pages
- [ ] All 5 state options display with correct colors and descriptions
- [ ] User can select exactly 2 states (no more, no less)
- [ ] Distribution slider appears when 2 states are selected
- [ ] Tower visualization updates colors in real-time
- [ ] Continue button is styled and only enabled when 2 states selected
- [ ] All animations work smoothly
- [ ] Data is properly saved and passed to next phase
- [ ] Navigation to Detail Tokens phase works

**VERIFICATION:** Color Phase should be fully functional with proper design, animations, and data flow ready for Section 7 implementation.