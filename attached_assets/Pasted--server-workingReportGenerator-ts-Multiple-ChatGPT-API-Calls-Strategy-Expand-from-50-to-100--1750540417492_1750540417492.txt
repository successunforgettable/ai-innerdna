// server/workingReportGenerator.ts - Multiple ChatGPT API Calls Strategy
// Expand from 50 to 100+ placeholders using sequential ChatGPT calls

interface MultiChatGPTRequest {
  personalityType: string;
  personalityName: string;
  wingInfluence: number;
  moodStates: {
    primary: { name: string; percentage: number };
    secondary: { name: string; percentage: number };
  };
  subtype: string;
}

// CALL 1: Core Content (50 placeholders) - ALREADY WORKING
async function generateCoreChatGPTContent(userData: MultiChatGPTRequest): Promise<Record<string, string> | null> {
  // This is your current working function - keep as-is
  const prompt = `You are an expert personality transformation coach creating a comprehensive hero's journey report...
  // [Current working prompt that generates 50 placeholders]`;
  
  return await callChatGPTAPI(prompt, "Core Content");
}

// CALL 2: Extended Testimonials & Case Studies (25 placeholders)
async function generateTestimonialsChatGPTContent(userData: MultiChatGPTRequest): Promise<Record<string, string> | null> {
  const prompt = `You are an expert personality transformation coach. Generate authentic testimonials and case studies for a ${userData.personalityType} - ${userData.personalityName} transformation report.

CRITICAL: Respond ONLY with valid JSON. No markdown formatting.

User Profile:
- Personality Type: ${userData.personalityType} - ${userData.personalityName}
- Wing Influence: ${userData.wingInfluence}
- Primary Mood State: ${userData.moodStates.primary.name} (${userData.moodStates.primary.percentage}%)
- Subtype: ${userData.subtype}

Generate 25 testimonial and case study fields:

{
  "TESTIMONIAL5_QUOTE": "Authentic quote about week 6 breakthrough moment",
  "TESTIMONIAL5_AUTHOR": "Realistic name, profession & ${userData.personalityName} Graduate",
  "TESTIMONIAL6_QUOTE": "Authentic quote about relationship transformation", 
  "TESTIMONIAL6_AUTHOR": "Realistic name, profession & ${userData.personalityName} Graduate",
  "TESTIMONIAL7_QUOTE": "Authentic quote about career leadership change",
  "TESTIMONIAL7_AUTHOR": "Realistic name, profession & ${userData.personalityName} Graduate",
  "TESTIMONIAL8_QUOTE": "Authentic quote about financial mindset shift",
  "TESTIMONIAL8_AUTHOR": "Realistic name, profession & ${userData.personalityName} Graduate",
  
  "CASE_STUDY_1_TITLE": "Case study title about career transformation",
  "CASE_STUDY_1_BEFORE": "Before state for this personality type professionally",
  "CASE_STUDY_1_AFTER": "After state showing leadership transformation",
  "CASE_STUDY_1_QUOTE": "Quote from this case study participant",
  
  "CASE_STUDY_2_TITLE": "Case study title about relationship breakthrough", 
  "CASE_STUDY_2_BEFORE": "Before state in relationships for this type",
  "CASE_STUDY_2_AFTER": "After state showing connection transformation",
  "CASE_STUDY_2_QUOTE": "Quote from this case study participant",
  
  "CASE_STUDY_3_TITLE": "Case study title about inner peace achievement",
  "CASE_STUDY_3_BEFORE": "Before state of inner turmoil for this type", 
  "CASE_STUDY_3_AFTER": "After state showing heart-brain coherence",
  "CASE_STUDY_3_QUOTE": "Quote from this case study participant",
  
  "SUCCESS_STORY_1": "Success story about rapid transformation",
  "SUCCESS_STORY_2": "Success story about overcoming resistance",
  "SUCCESS_STORY_3": "Success story about sustainable change",
  "SUCCESS_STORY_4": "Success story about leadership evolution",
  
  "BREAKTHROUGH_MOMENT_1": "Description of typical breakthrough moment for this type",
  "BREAKTHROUGH_MOMENT_2": "Description of relationship breakthrough for this personality"
}`;

  return await callChatGPTAPI(prompt, "Testimonials & Case Studies");
}

// CALL 3: Detailed Transformation Metrics (25 placeholders)
async function generateMetricsChatGPTContent(userData: MultiChatGPTRequest): Promise<Record<string, string> | null> {
  const prompt = `You are an expert personality transformation coach. Generate detailed transformation metrics and outcomes for a ${userData.personalityType} - ${userData.personalityName}.

CRITICAL: Respond ONLY with valid JSON. No markdown formatting.

User Profile:
- Personality Type: ${userData.personalityType} - ${userData.personalityName}
- Wing Influence: ${userData.wingInfluence}
- Primary Mood State: ${userData.moodStates.primary.name} (${userData.moodStates.primary.percentage}%)
- Subtype: ${userData.subtype}

Generate 25 transformation metric fields:

{
  "TRANSFORMATION_METRIC_1": "Specific measurable outcome for this personality type",
  "TRANSFORMATION_METRIC_2": "Leadership effectiveness improvement metric",
  "TRANSFORMATION_METRIC_3": "Relationship quality enhancement metric",
  "TRANSFORMATION_METRIC_4": "Stress reduction and peace metric",
  
  "BEFORE_AFTER_LEADERSHIP": "Leadership style transformation description",
  "BEFORE_AFTER_COMMUNICATION": "Communication pattern change description", 
  "BEFORE_AFTER_DECISION_MAKING": "Decision making evolution description",
  "BEFORE_AFTER_STRESS_RESPONSE": "Stress response transformation description",
  
  "WEEK_BY_WEEK_1": "Week 1-2 transformation milestones for this type",
  "WEEK_BY_WEEK_2": "Week 3-4 transformation milestones for this type",
  "WEEK_BY_WEEK_3": "Week 5-6 transformation milestones for this type", 
  "WEEK_BY_WEEK_4": "Week 7-8 transformation milestones for this type",
  "WEEK_BY_WEEK_5": "Week 9-10 transformation milestones for this type",
  
  "COHERENCE_METRIC_1": "Heart-brain coherence improvement measure",
  "COHERENCE_METRIC_2": "Nervous system regulation improvement",
  "COHERENCE_METRIC_3": "Emotional intelligence enhancement metric",
  
  "LONG_TERM_OUTCOME_1": "6-month post-program outcome for this type",
  "LONG_TERM_OUTCOME_2": "1-year sustained transformation measure",
  "LONG_TERM_OUTCOME_3": "Lifetime behavioral change indicator",
  
  "FAMILY_IMPACT": "How transformation affects family relationships",
  "TEAM_IMPACT": "How transformation affects team dynamics", 
  "CAREER_IMPACT": "How transformation affects career trajectory",
  
  "ROI_PERSONAL": "Personal return on investment description",
  "ROI_PROFESSIONAL": "Professional return on investment description",
  "ROI_RELATIONAL": "Relational return on investment description"
}`;

  return await callChatGPTAPI(prompt, "Transformation Metrics");
}

// CALL 4: Advanced Wheel of Life Content (31 placeholders)
async function generateWheelChatGPTContent(userData: MultiChatGPTRequest): Promise<Record<string, string> | null> {
  const prompt = `You are an expert personality transformation coach. Generate detailed wheel of life transformation content for a ${userData.personalityType} - ${userData.personalityName}.

CRITICAL: Respond ONLY with valid JSON. No markdown formatting.

User Profile:
- Personality Type: ${userData.personalityType} - ${userData.personalityName}
- Wing Influence: ${userData.wingInfluence}
- Primary Mood State: ${userData.moodStates.primary.name} (${userData.moodStates.primary.percentage}%)
- Subtype: ${userData.subtype}

Generate 31 detailed wheel of life fields:

{
  "WHEEL_SPIRITUALITY_BEFORE": "Current spiritual/meaning state for this type",
  "WHEEL_SPIRITUALITY_AFTER": "Transformed spiritual connection and purpose",
  "WHEEL_RECREATION_BEFORE": "Current relationship with joy and play",
  "WHEEL_RECREATION_AFTER": "Transformed capacity for enjoyment and renewal",
  
  "WHEEL_DETAILED_CAREER_STRUGGLE": "Detailed career struggles specific to this type",
  "WHEEL_DETAILED_CAREER_SOLUTION": "Detailed career transformation pathway",
  "WHEEL_DETAILED_FINANCE_STRUGGLE": "Detailed financial patterns and blocks",
  "WHEEL_DETAILED_FINANCE_SOLUTION": "Detailed financial transformation approach",
  
  "WHEEL_DETAILED_RELATIONSHIP_STRUGGLE": "Detailed relationship challenges for this type",
  "WHEEL_DETAILED_RELATIONSHIP_SOLUTION": "Detailed relationship transformation path",
  "WHEEL_DETAILED_MENTAL_STRUGGLE": "Detailed mental/emotional challenges",
  "WHEEL_DETAILED_MENTAL_SOLUTION": "Detailed mental/emotional transformation",
  
  "WHEEL_DETAILED_PHYSICAL_STRUGGLE": "Detailed physical symptoms and tension",
  "WHEEL_DETAILED_PHYSICAL_SOLUTION": "Detailed physical health transformation",
  "WHEEL_DETAILED_SOCIAL_STRUGGLE": "Detailed social connection challenges", 
  "WHEEL_DETAILED_SOCIAL_SOLUTION": "Detailed social transformation outcomes",
  
  "LIFE_AREA_PRIORITY_1": "Most important life area for this personality to transform",
  "LIFE_AREA_PRIORITY_2": "Second priority transformation area",
  "LIFE_AREA_PRIORITY_3": "Third priority transformation area",
  
  "TRANSFORMATION_TIMELINE_CAREER": "Career transformation timeline for this type",
  "TRANSFORMATION_TIMELINE_RELATIONSHIPS": "Relationship change timeline",
  "TRANSFORMATION_TIMELINE_INNER_PEACE": "Inner peace development timeline",
  
  "RESISTANCE_PATTERN_1": "Primary resistance pattern for this personality type",
  "RESISTANCE_PATTERN_2": "Secondary resistance pattern they face",
  "RESISTANCE_SOLUTION_1": "How to overcome first resistance pattern",
  "RESISTANCE_SOLUTION_2": "How to overcome second resistance pattern",
  
  "BREAKTHROUGH_INDICATOR_1": "First sign of breakthrough for this type",
  "BREAKTHROUGH_INDICATOR_2": "Second breakthrough indicator to watch for",
  "BREAKTHROUGH_INDICATOR_3": "Third transformation milestone indicator",
  
  "INTEGRATION_PRACTICE_1": "Key daily practice for sustaining transformation",
  "INTEGRATION_PRACTICE_2": "Key weekly practice for ongoing growth",
  "INTEGRATION_PRACTICE_3": "Key monthly practice for long-term success"
}`;

  return await callChatGPTAPI(prompt, "Wheel of Life Details");
}

// Shared ChatGPT API call function
async function callChatGPTAPI(prompt: string, contentType: string): Promise<Record<string, string> | null> {
  try {
    console.log(`🤖 Calling ChatGPT API for ${contentType}...`);
    
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: 'You are an expert personality transformation coach. Respond only with valid JSON containing the exact field names requested. Do not include markdown formatting or explanations.'
          },
          {
            role: 'user', 
            content: prompt
          }
        ],
        max_tokens: 3000,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      console.error(`❌ ChatGPT API error for ${contentType}: ${response.status}`);
      return null;
    }

    const data = await response.json();
    const content = data.choices[0]?.message?.content;

    if (!content) {
      console.error(`❌ No content received for ${contentType}`);
      return null;
    }

    // Parse JSON response
    let jsonContent = content.trim();
    if (jsonContent.startsWith('```json')) {
      jsonContent = jsonContent.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    } else if (jsonContent.startsWith('```')) {
      jsonContent = jsonContent.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }

    const parsedContent = JSON.parse(jsonContent);
    console.log(`✅ ${contentType} generated: ${Object.keys(parsedContent).length} fields`);
    return parsedContent;

  } catch (error) {
    console.error(`❌ ${contentType} generation failed:`, error);
    return null;
  }
}

// Main multi-call generation function
export async function generateMultiChatGPTReport(assessmentData: any): Promise<string | null> {
  try {
    console.log("🚀 Starting MULTI-CALL ChatGPT content generation...");
    
    const userData: MultiChatGPTRequest = {
      personalityType: `Type ${assessmentData.results?.personalityType || 6}`,
      personalityName: getPersonalityName(assessmentData.results?.personalityType || 6),
      wingInfluence: assessmentData.results?.wingInfluence || 7,
      moodStates: {
        primary: { name: "Anxious & Worried", percentage: 65 },
        secondary: { name: "Focused & Determined", percentage: 35 }
      },
      subtype: assessmentData.results?.subtype || "Self-Preservation"
    };
    
    // Execute all 4 ChatGPT API calls
    const [coreContent, testimonialsContent, metricsContent, wheelContent] = await Promise.all([
      generateCoreChatGPTContent(userData),      // 50 fields
      generateTestimonialsChatGPTContent(userData), // 25 fields  
      generateMetricsChatGPTContent(userData),    // 25 fields
      generateWheelChatGPTContent(userData)       // 31 fields
    ]);
    
    // Verify all calls succeeded
    if (!coreContent || !testimonialsContent || !metricsContent || !wheelContent) {
      console.error("❌ One or more ChatGPT API calls failed");
      return null;
    }
    
    // Combine all ChatGPT content
    const allChatGPTContent = {
      ...coreContent,
      ...testimonialsContent, 
      ...metricsContent,
      ...wheelContent
    };
    
    const totalFields = Object.keys(allChatGPTContent).length;
    console.log(`✅ Multi-call ChatGPT generation successful: ${totalFields} total fields`);
    
    // Calculate progress percentages (technical only)
    const progressPercentages = calculateDynamicProgressPercentages(userData.moodStates);
    
    // Read and process template
    const templatePath = path.join(process.cwd(), 'challenger_template.html');
    let template = await fs.readFile(templatePath, 'utf-8');
    
    // Inject all ChatGPT content
    Object.entries(allChatGPTContent).forEach(([key, value]) => {
      const placeholder = `{{${key}}}`;
      template = template.replace(new RegExp(placeholder, 'g'), value);
    });
    
    // Inject progress percentages
    Object.entries(progressPercentages).forEach(([key, value]) => {
      const placeholder = `{{${key}}}`;
      template = template.replace(new RegExp(placeholder, 'g'), value);
    });
    
    console.log(`✅ Multi-call report generated: ${totalFields} ChatGPT fields, ~${Math.round(totalFields/131*100)}% template coverage`);
    return template;
    
  } catch (error) {
    console.error("❌ Multi-call ChatGPT generation failed:", error);
    return null;
  }
}

function getPersonalityName(type: number): string {
  const names = {
    1: "Perfectionist", 2: "Helper", 3: "Achiever", 4: "Individualist",
    5: "Investigator", 6: "Loyalist", 7: "Enthusiast", 8: "Challenger", 9: "Peacemaker"
  };
  return names[type] || "Challenger";
}

function calculateDynamicProgressPercentages(moodStates: any): Record<string, string> {
  const primaryPercentage = moodStates.primary.percentage;
  const isAnxious = moodStates.primary.name.includes("Anxious") || moodStates.primary.name.includes("Worried");
  
  if (isAnxious || primaryPercentage < 50) {
    return {
      CAREER_PERCENTAGE: "21%", FINANCES_PERCENTAGE: "18%", RELATIONSHIPS_PERCENTAGE: "15%",
      MENTAL_PERCENTAGE: "12%", PHYSICAL_PERCENTAGE: "18%", SOCIAL_PERCENTAGE: "20%",
      ENVIRONMENT_PERCENTAGE: "25%", GROWTH_PERCENTAGE: "10%"
    };
  } else {
    return {
      CAREER_PERCENTAGE: "40%", FINANCES_PERCENTAGE: "35%", RELATIONSHIPS_PERCENTAGE: "30%",
      MENTAL_PERCENTAGE: "25%", PHYSICAL_PERCENTAGE: "30%", SOCIAL_PERCENTAGE: "35%", 
      ENVIRONMENT_PERCENTAGE: "45%", GROWTH_PERCENTAGE: "20%"
    };
  }
}